(function(b,c,e){function d(f){this._init(f)}d.prototype={_init:function(f){c.extend(true,this,f)},validate:function(f){var g=[];c.each(this._normalizeRules(f.rules),function(i,j){if(j.validator(f.value,f.item,j.param)){return}var h=c.isFunction(j.message)?j.message(f.value,f.item):j.message;g.push(h)});return g},_normalizeRules:function(f){if(!c.isArray(f)){f=[f]}return c.map(f,c.proxy(function(g){return this._normalizeRule(g)},this))},_normalizeRule:function(f){if(typeof f==="string"){f={validator:f}}if(c.isFunction(f)){f={validator:f}}if(c.isPlainObject(f)){f=c.extend({},f)}else{throw Error("wrong validation config specified")}if(c.isFunction(f.validator)){return f}return this._applyNamedValidator(f,f.validator)},_applyNamedValidator:function(h,g){delete h.validator;var f=a[g];if(!f){throw Error('unknown validator "'+g+'"')}if(c.isFunction(f)){f={validator:f}}return c.extend({},f,h)}};b.Validation=d;var a={required:{message:"Field is required",validator:function(f){return f!==e&&f!==null&&f!==""}},rangeLength:{message:"Field value length is out of the defined range",validator:function(g,f,h){return g.length>=h[0]&&g.length<=h[1]}},minLength:{message:"Field value is too short",validator:function(g,f,h){return g.length>=h}},maxLength:{message:"Field value is too long",validator:function(g,f,h){return g.length<=h}},pattern:{message:"Field value is not matching the defined pattern",validator:function(g,f,h){if(typeof h==="string"){h=new RegExp("^(?:"+h+")$")}return h.test(g)}},range:{message:"Field value is out of the defined range",validator:function(g,f,h){return g>=h[0]&&g<=h[1]}},min:{message:"Field value is too small",validator:function(g,f,h){return g>=h}},max:{message:"Field value is too large",validator:function(g,f,h){return g<=h}}};b.validators=a}(jsGrid,jQuery));